{%- assign show_label_in_stock = settings.product_collection_show_label_in_stock -%}
{%- assign show_label_out_stock = settings.product_collection_show_label_out_stock -%}
{%- assign show_label_sale = settings.product_collection_show_label_sale -%}
{%- assign show_label_new =  settings.product_collection_show_label_new -%}
{%- assign show_label_hot =  settings.product_collection_show_label_hot -%}
{%- assign show_countdown = false | default: settings.product_collection_show_countdown -%}
{%- assign show_images_navigation = true | default: settings.product_collection_show_images_navigation -%}
{%- assign show_title = settings.product_collection_show_title -%}
{%- assign show_sku = settings.product_collection_show_sku -%}
{%- assign show_barcode =  settings.product_collection_show_barcode -%}
{%- assign show_availability =  settings.product_collection_show_availability -%}
{%- assign show_type = settings.product_collection_show_type -%}
{%- assign show_vendor = settings.product_collection_show_vendor -%}
{%- assign show_description = settings.product_collection_show_description -%}
{%- assign show_price = settings.product_collection_show_price -%}
{%- assign show_options = settings.product_collection_show_options -%}
{%- assign show_custom_options =  settings.product_show_custom_options -%}
{%- assign show_quantity = false | default: settings.product_collection_show_quantity -%}
{%- assign show_button_add_to_cart = settings.product_collection_show_button_add_to_cart -%}
{%- assign show_button_add_to_wishlist = settings.product_collection_show_button_add_to_wishlist -%}
{%- assign show_button_add_to_compare =  settings.product_collection_show_button_add_to_compare -%}
{%- assign show_button_quick_view = settings.product_collection_show_button_quick_view -%}
{%- assign show_reviews = settings.product_collection_show_reviews -%}
{%- assign hide_reviews_counter = settings.product_collection_hide_reviews_counter -%}
{% assign enable_hover_image = settings.product_collection_enable_hover_image %}
{% assign build_variant = "all" %}
{% assign limit = section.settings.max_count -%} 
{% assign sid = section.id %}
{%assign arrows =  section.settings.arrows%}
{%assign dots =  section.settings.dots%}
{% assign padding = section.settings.padding %}
<section id="laber_{{sid}}" class="js-recently-viewed laber_collection_viewed {% if section.settings.use_border_for_product %}alo-border-product{% endif%}" style="display:none">
  <div class="container {% if section.settings.layout == "full-width"%}{{section.settings.layout}}{% endif %}">
    <div class="products-arrivals">
          {% if section.settings.title != blank %}
      <div class="wrap_title {{ section.settings.text_size }}">
        <h3 class="section-title alo-text-transform" style="--alo-text-transform:{{ section.settings.text_transform }}">{{section.settings.title}}</h3>  
        {% if section.settings.content!= blank %}
          <div class="content">{{section.settings.content}}</div>
        {% endif %}
      </div>
    {% endif %}
      <div class="section-content">
        <div class="content_section slick-carousel ">
          {% include 'grid-slider', settings:section.settings %}
          <div id="js_recently_wrapper" class="grid-slider-ajax js_carousel laber-slick-carousel recently-product"
               {{gridSlider}}
                data-limit="{{section.settings.limit}}"
               data-append-Arrows=".arrows_{{sid}}" 
               data-append-Dots=".dots_{{sid}}"
               >
            <!-- recently product load from ajax -->
          </div>
          {%if dots %}
          <div class="laber_append_dots dots_{{sid}}"></div>
          {%endif%}
          {%if arrows%} 
          <div class="laber_append_arrows arrows_{{sid}}"></div>  
          {% endif %}
        </div>
      </div>
    </div>
  </div>
</section>
{%- render 'section_style' -%} 
{% style %}
  #laber_{{sid}} .grid-init .alo-item{
    padding-bottom:{{padding | plus: padding}}px; 
  }
{% endstyle %}
<script>
// First Block
  function setRecentlyViewedPdp() {
    {%- if product.compare_at_price > product.price -%}
    	{%- assign sale_percent = product.price | times: 100 | divided_by: product.compare_at_price | minus: 100 | times: -1 -%}                       
    {%- endif -%}
      const pdpData = {
          productTitle : "{{ product.title }}",
          productImg : "{{ product.featured_image | img_url: '' }}",
          productPrice : "{{ product.price | money | remove_first: '' }}",
          productCompPrice: "{{ product.compare_at_price | money | remove_first: '' }}",
          productUrl : "{{ product.url }}",
          salePercent: "{{ sale_percent }}"
      };

      // Init Empty Array to push data
      const productArr = [];
      // Create a couple of variables
      let jsonResp,
          jsonRespArr,
          jsonRespArrStr;
      // Set the number how many products you want to capture
      const numberOfProduct = 4;
      // Now push the pdpData into Array so that we can use it
      productArr.push(pdpData);
      // Get the product title from pdpData
      const currPdpTitle = pdpData.productTitle;
      // Now Convert current page data into Strings which we already pushed in Array
      const pdpDataString = JSON.stringify(productArr);
      // Set the variable for localStorage
      const localData = localStorage.getItem('recently_viewed');

      // Second Block
      // first we need to check data if data is not there then store right // away
      if (localData == null) {
          localStorage.setItem('recently_viewed', pdpDataString);

      }
      // If data is there then we need to check couple of other conditions
      else if ( localData != null ) {

          // Create Variable for oldData or Previous page
          const oldPdpData = localStorage.getItem('recently_viewed');
          // Count the amount of data stored in strings so that we can remove // old products from the stack
          const countPdpData = (oldPdpData.match(/productTitle/g) || []).length;
          // we also need to check if user is not visiting page again
          const reVisitPdp =  oldPdpData.includes(currPdpTitle);
          // Get old data, merged it with new data and store merged data
          if (countPdpData < numberOfProduct && reVisitPdp == false) {
              jsonResp = JSON.parse(oldPdpData);
              jsonRespArr = jsonResp.concat(productArr);
              jsonRespArrStr = JSON.stringify(jsonRespArr);
              localStorage.setItem('recently_viewed', jsonRespArrStr);
          }
          // If User visited more the 4 pages delete first page data
          else if (countPdpData >= numberOfProduct && reVisitPdp == false) {
              jsonResp = JSON.parse(oldPdpData);
              jsonResp.shift();
              jsonRespArr = jsonResp.concat(productArr);
              jsonRespArr =  JSON.stringify(jsonRespArr);
              localStorage.setItem('recently_viewed', jsonRespArr);
          }
      }
  }

  // Now we write all our function and it's time to execute it
  setRecentlyViewedPdp();
  // Set Variable for Local Storage Data
  const localViewed = localStorage.recently_viewed;
  // console.log to verify the data
</script>
{%- schema -%}
{
  "name": "Products recently viewed",
  "class": "cms_section  product_section laber_section product_recently_viewed",
  "settings": [
   	{
        "type": "text",
        "id": "title",
        "label": "Heading",
        "default": "Recently viewed products"
    },
    {
        "type": "textarea",
        "id": "content",
        "label": "Content",
        "default": "Commodo sociosqu venenatis cras dolor sagittis integer luctus maecenas."
      },
      {
        "type": "select",
        "id": "text_size",
        "default": "medium",
        "options": [
          {
            "value": "small",
            "label": "small"
         },
         {
            "value": "medium",
            "label": "Medium"
         },
         {
            "value": "large",
            "label": "Large"
          }
        ],
        "label": "Text size"
      },
      {
        "type": "select",
        "id": "text_transform",
        "default": "none",
        "options": [
         {
            "value": "none",
            "label": "None"
         },
         {
            "value": "capitalize",
            "label": "Capitalize"
         },
         {
            "value": "lowercase",
            "label": "Lowercase"
         },
         {
            "value": "uppercase",
            "label": "Uppercase"
          }
        ],
        "label": "Text transform:"
      },
    {
        "type": "range",
        "id": "limit",
        "min": 1,
        "max": 24,
        "step": 1,
        "unit": "pds",
        "label": "Limit products",
        "default": 4
    },
  {
        "type": "header",
        "content": "---- Slider Show Collection ----",
        "info": "Refer to the attribute values [here](httpss://kenwheeler.github.io/slick)"
    },  
    {
        "type": "checkbox",
        "id": "use-slider",
        "label": "Use slider?",
        "default": true
    },
    {  
        "type": "range",  
        "id": "slides-To-Scroll",  
        "label": "Slide to scroll",  
        "info": "The number of items slide to scroll",
        "min": 1,
        "max": 8,
        "step": 1,
        "unit": "col",
        "default": 1
    },   
    {  
        "type": "range",  
        "id": "visible",  
        "label": "Columns in Visible",
    "info": "Item(s) in screen ( Size >= 1920 )",
        "min": 1,
        "max": 8,
        "step": 1,
        "unit": "col",
        "default": 5 
    },
    {  
        "type": "range",  
        "id": "widescreen",  
        "label": "Columns in Widescreen",
    "info": "Item(s) in screen ( 1366 <= Size < 1920 )",
        "min": 1,
        "max": 8,
        "step": 1,
        "unit": "col",
        "default": 4 
    },  
    {  
        "type": "range",  
        "id": "desktop",  
        "label": "Columns in Desktop",
    "info":  "Item(s) in screen ( 1200 <= Size < 1480 )",
        "min": 1,
        "max": 8,
        "step": 1,
        "unit": "col",
        "default": 4  
    },    
    {  
        "type": "range",  
        "id": "laptop",  
        "label": "Columns in Laptop",
    "info": "Item(s) in screen ( 992 <= Size < 1200 )",
        "min": 1,
        "max": 8,
        "step": 1,
        "unit": "col",
        "default": 4
    },    
    {  
        "type": "range",  
        "id": "notebook",  
        "label": "Columns in Notebook",
    "info": "Item(s) in screen ( 768 <= Size < 992 )",
        "min": 1,
        "max": 8,
        "step": 1,
        "unit": "col",
        "default": 3  
    },  
    {  
        "type": "range",  
        "id": "tablet",  
        "label": "Columns in Tablet",
    "info": "Item(s) in screen ( 576 <= Size < 768 )",
        "min": 1,
        "max": 8,
        "step": 1,
        "unit": "col",
        "default": 3 
    },
    {  
        "type": "range",  
        "id": "landscape",  
        "label": "Columns in Landscape",
    "info": "Item(s) in screen ( 480 <= Size < 576 )",
        "min": 1,
        "max": 6,
        "step": 1,
        "unit": "col",
        "default": 2 
    }, 
    {  
        "type": "range",  
        "id": "portrait",  
        "label": "Columns in Portrait",
    "info": "Item(s) in screen ( 360 < Size < 480 )",
        "min": 1,
        "max": 6,
        "step": 1,
        "unit": "col",
        "default": 2 
    },
    {  
        "type": "range",  
        "id": "mobile",  
        "label": "Columns in Mobile",
    "info": "Item(s) in screen ( Size < = 360 )",
        "min": 1,
        "max": 4,
        "step": 1,
        "unit": "col",
        "default": 1 
    },
    {  
        "type": "range",  
        "id": "rows",  
        "label": "Rows Slider",  
        "min": 1,
        "max": 3,
        "step": 1,
        "unit": "row",
        "default": 1
    },
    {
        "type": "checkbox",
        "id": "autoplay",
        "label": "Autoplay",
        "default": true
    },
    { 
        "type": "text",
        "id": "speed",
        "label": "Speed",
        "default": "300",
        "info": "Autoplay Speed in milliseconds"
    },
    { 
        "type": "text",
        "id": "autoplay-Speed",
        "label": "Auto Play Speed",
        "default": "3000",
        "info": "Autoplay Speed in milliseconds"
    },
    { 
        "type": "checkbox",
        "id": "arrows",
        "label": "Arrows",
        "default": true
    },
    { 
        "type": "checkbox",
        "id": "fade",
        "label": "Fade",
        "default": false,
        "info": "Only use for 1 column"
    },
    { 
        "type": "checkbox",
        "id": "center-Mode",
        "label": "Center Mode",
        "default": false
    },
    { 
        "type": "checkbox",
        "id": "adaptive-Height",
        "label": "Adaptive Height",
        "default": false
    },
    { 
        "type": "checkbox",
        "id": "dots",
        "label": "Dots",
        "default": false 
    },
    { 
        "type": "checkbox",
        "id": "infinite",
        "label": "Infinite",
        "default": false
    },
    {  
        "type": "range",  
        "id": "padding",  
        "label": "padding",
		"info": "Distance between items",
        "min": 0,
        "max": 15,
        "step": 0.5,
        "unit": "px",
        "default": 10 
    },
    { 
        "type": "checkbox",
        "id": "vertical",
        "label": "Vertical",
        "default": false
    },
    
    {
        "type": "header",
        "content": "== Design Options"
    },
    {
      "type": "select",
      "id": "layout",
      "default": "container",
      "options": [
       {
          "value": "container",
          "label": "Container"
       },
       {
          "value": "full-width",
          "label": "Full Width"
        }
      ],
      "label": "Layout"
    },
    {
      "type": "color",
      "id": "cl_bg",
      "label": "Background color",
      "default": "#fff"
    },
    {
      "type": "text",
      "id": "mg",
      "label": "Margin",
      "info":"Margin top, margin right, margin bottom, margin left. If you not use to blank"
    },
    {
      "type": "text",
      "id": "pd",
      "label": "Padding",
      "info":"Padding top, padding right, padding bottom, padding left. If you not use to blank"
    },
   {
      "type": "header",
      "content": "== Design Mobile Options"
    },
    {
      "type": "text",
      "id": "mg_mb",
      "label": "Margin"
    },
    {
      "type": "text",
      "id": "pd_mb",
      "label": "Padding"
    }    
  ]
}
{% endschema %}